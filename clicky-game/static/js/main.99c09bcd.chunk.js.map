{"version":3,"sources":["BoardGame.js","App.js","serviceWorker.js","index.js"],"names":["cards","cardId","cardImage","BoardGame","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","availableCards","cardMatrix","boardCardSelectorHandler","onCardSelected","onCardSelectedHandler","bind","assertThisInitialized","_this2","shuffledCards","array","result","source","slice","_loop","count","randomIndex","Math","floor","random","card","push","filter","c","length","shuffle","newMatrix","r","newIndex","setState","_this3","react_default","a","createElement","id","className","map","role","aria-label","src","onClick","alt","Component","App","cardHistory","score","topScore","message","cardSelected","newCardHistory","newScore","newTopScore","newMessage","cardPreviouslySelected","max","class","href","style","float","src_BoardGame","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99c09bcd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nfunction shuffle(array) {\n    let result = [];\n    let source = array.slice();\n\n    for(let count = source.length; count > 0; count--) {\n        let randomIndex = Math.floor(Math.random() * count);\n        let card = source[randomIndex];\n        result.push(card);\n        source = source.filter(c => (c && c.cardId !== card.cardId));\n    }\n    return result;\n}\n\nconst cards = [\n    {\n        cardId: 1,\n        cardImage: \"Blossom.png\"\n    },\n    {\n        cardId: 2,\n        cardImage: \"Bravo.png\"   \n    },\n    {\n        cardId: 3,\n        cardImage: \"Bubbles.png\"\n    },\n    {\n        cardId: 4,\n        cardImage: \"Buttercup.png\"\n    },\n    {\n        cardId: 5,\n        cardImage: \"Courage.png\"\n    },\n    {\n        cardId: 6,\n        cardImage: \"dafne.png\"\n    },\n    {\n        cardId: 7,\n        cardImage: \"Dexter.png\"\n    },\n    {\n        cardId: 8,\n        cardImage: \"Didi.png\"\n    },\n    {\n        cardId: 9,\n        cardImage: \"edd.png\"\n    },\n    {\n        cardId: 10,\n        cardImage: \"JerryMouse.png\"\n    },\n    {\n        cardId: 11,\n        cardImage: \"tom.png\"\n    },\n    {\n        cardId: 12,\n        cardImage: \"Scooby.png\"\n    }];\n\nclass BoardGame extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            availableCards: cards,\n            cardMatrix: [[cards[0], cards[1], cards[2], cards[3]],\n                         [cards[4], cards[5], cards[6], cards[7]],\n                         [cards[8], cards[9], cards[10], cards[11]]]\n        }\n\n        this.boardCardSelectorHandler = this.props.onCardSelected;\n\n        this.onCardSelectedHandler = this.onCardSelectedHandler.bind(this);\n    }\n\n    onCardSelectedHandler(cardId) {\n        let shuffledCards = shuffle(this.state.availableCards);\n        let newMatrix = [];\n        for(var r = 0; r < 3; r++) {\n            newMatrix.push([]);\n            for(var c = 0; c < 4; c++) {\n            let row = newMatrix[r];\n            let newIndex = (r * 4) + c;\n            row.push(shuffledCards[newIndex]);\n        }\n    }\n    this.setState({\n        availableCards: shuffledCards,\n        cardMatrix: newMatrix\n    }, () => this.boardCardSelectorHandler(cardId));\n}\n\nrender() {\n    return(\n        <main id=\"board-container\" className=\"container\">\n        {this.state.cardMatrix.map(r => {\n            return(\n                <div className=\"card-row\">\n                    {r.map(c => { return(\n                        <div id={\"card-\" + c.cardId} role=\"img\" aria-label=\"click item\" className=\"click-item\">\n                            <img src={\"./images/\" + c.cardImage} onClick={() => this.onCardSelectedHandler(c.cardId)} alt={c.cardImage}/>                        \n                        </div>\n                    )})}\n                </div>\n            );\n        })}\n        </main>);\n     }\n}   \n\nexport default BoardGame;\n","import React, { Component } from 'react';\nimport BoardGame from './BoardGame.js';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cardHistory: [],\n      score: 0,\n      topScore: 0,\n      message: \"Click an image to begin!\"\n    }\n\n    this.cardSelected = this.cardSelected.bind(this);\n}\n\n  cardSelected(cardId) {\n    if (cardId) {\n\n      let newCardHistory;\n      let newScore;\n      let newTopScore;\n      let newMessage;\n      if (this.cardPreviouslySelected(this.state.cardHistory.slice(), cardId)) {\n        //Game ends\n\n        newCardHistory = [];\n        newScore = 0;\n        newTopScore = this.state.topScore;\n        newMessage = \"You guessed incorrectly! Don't click an image more than once!\";\n      } else {\n        //Game continues\n\n        newCardHistory = this.state.cardHistory.slice();\n        newCardHistory.push(cardId);\n        newScore = this.state.score + 1;\n        newTopScore = Math.max(newScore, this.state.topScore);\n        newMessage = \"You guessed correctly! Keep playing!\"\n      }\n      this.setState({\n        cardHistory: newCardHistory,\n        score: newScore,\n        topScore: newTopScore,\n        message: newMessage\n      });\n    }\n  }\n  cardPreviouslySelected(cards, card) {\n    return (cards.filter(c => c === card).length > 0);\n  }\n  render() {\n    return (\n        <div>\n            <nav class=\"navbar\">\n                <ul>\n                    <li class=\"brand\">\n                        <a href=\"/\">Clicky Game!</a>\n                    </li>\n                    <li class=\"\">{this.state.message}</li>\n                </ul>\n                <div style={{float: \"right\"}}>Score: {this.state.score} | Top Score: {this.state.topScore}</div>\n            </nav>\n            <header class=\"header\">\n                <h1>Clicky Game!</h1>\n                <h2>Click on an image to earn points, but don't click on the same one more than once!</h2>\n            </header>\n            <section id=\"board\"><BoardGame onCardSelected={this.cardSelected}/></section>\n            <footer class=\"footer\">\n                <div class=\"bottom\">Copyright Belen Fernandez &copy;2018</div>\n            </footer>\n        </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}